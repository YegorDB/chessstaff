(()=>{"use strict";var e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{Bishop:()=>S,Board:()=>G,BoardColors:()=>A,BoardInitial:()=>v,BoardInitialCastle:()=>b,BoardInitialPosition:()=>y,BoardSquares:()=>x,FENData:()=>P,FENDataCreator:()=>N,FiftyMovesRuleCounter:()=>O,King:()=>E,KingCastle:()=>m,KingCastleInitial:()=>L,KingCastleRoad:()=>C,KingCheckers:()=>I,Knight:()=>f,LinearPiece:()=>_,MovesCounter:()=>k,Pawn:()=>g,Piece:()=>c,PieceSquares:()=>r,Queen:()=>q,Relation:()=>s,Rook:()=>p,Square:()=>u,SquareCoordinates:()=>a,SquareName:()=>o,SquareNeighbors:()=>l,SquareOnEdge:()=>n,SquarePieces:()=>i,SquaresLine:()=>h,StepPiece:()=>d});class s{static MOVE="move";static ATTACK="attack";static XRAY="xray";static COVER="cover";static CONTROL="control";static ALL_KINDS=[s.MOVE,s.ATTACK,s.XRAY,s.COVER,s.CONTROL];constructor(e,t){this._target=e,this._relatedName=t,this.refresh()}_checkKind(e,t=null){if(!s.ALL_KINDS.includes(e)&&t!=e)throw Error(`Wrong relation kind (${e}) passed`)}refresh(e="all"){this._checkKind(e,"all");let t="all"===e?s.ALL_KINDS:[e];for(let e of t){if(this[e])for(let t of this[e])t[this._relatedName].remove(e,this._target,!1);this[e]=null}}add(e,t,s=!0){this._checkKind(e),this[e]?this[e].push(t):this[e]=[t],s&&t[this._relatedName].add(e,this._target,!1)}remove(e,t,s=!0){this._checkKind(e),this[e]&&(this[e]=this[e].filter((e=>!e.theSame(t))),0==this[e].length&&(this[e]=null)),s&&t[this._relatedName].remove(e,this._target,!1)}includes(e,t){return this._checkKind(e),!!this[e]&&0!=this[e].filter((e=>e.theSame(t))).length}}class i extends s{constructor(e){super(e,"squares")}}class r extends s{constructor(e){super(e,"pieces")}limit(e,t){if(this._checkKind(e),this[e]){for(let s of this[e].filter((e=>!t.includes(e.name.value))))s[this._relatedName].remove(e,this._target,!1);this[e]=this[e].filter((e=>t.includes(e.name.value))),0==this[e].length&&(this[e]=null)}}}class o{static symbols=["a","b","c","d","e","f","g","h"];static numbers=["1","2","3","4","5","6","7","8"];constructor(e){let t=e[0],s=e[1];if(!o.symbols.includes(t))throw Error(`Wrong symbol (${t}) passed. Try one of ${o.symbols}`);if(!o.numbers.includes(s))throw Error(`Wrong number (${s}) passed. Try one of ${o.numbers}`);this._symbol=t,this._number=s,this._value=`${t}${s}`}get symbol(){return this._symbol}get number(){return this._number}get value(){return this._value}}class a{static numbers=[0,1,2,3,4,5,6,7];static correctCoordinate(e){return a.numbers.includes(e)}static correctCoordinates(e,t){return a.correctCoordinate(e)&&a.correctCoordinate(t)}constructor(e){let t=e[0],s=e[1];if(!a.correctCoordinate(t))throw Error(`Wrong x value (${t}) passed. Try one of ${a.numbers}`);if(!a.correctCoordinate(s))throw Error(`Wrong y value (${s}) passed. Try one of ${a.numbers}`);this._x=t,this._y=s,this._value=[t,s]}get x(){return this._x}get y(){return this._y}get value(){return this._value}}class n{constructor(e){this._up=!1,this._right=!1,this._down=!1,this._left=!1,7==e.y?this._up=!0:0==e.y&&(this._down=!0),7==e.x?this._right=!0:0==e.x&&(this._left=!0)}get up(){return this._up}get right(){return this._right}get down(){return this._down}get left(){return this._left}}class h{constructor(e,t){if(this._dx=Math.abs(e.coordinates.x-t.coordinates.x),this._dy=Math.abs(e.coordinates.y-t.coordinates.y),this._dx!=this._dy&&0!=this._dx&&0!=this._dy)throw Error(`\n        Squares ${e.name.value} and ${t.name.value}\n        aren't located on the same line (horizontal, vertical, diagonal).\n      `);this._startSquare=e,this._endSquare=t,this._betweenSquaresNames=[],this._betweenSquaresCount=0,this._getBetweenSquaresData()}betweenSquaresNames(e=!1,t=!1){return[...e?[this._startSquare.name.value]:[],...this._betweenSquaresNames,...t?[this._endSquare.name.value]:[]]}betweenSquaresCount(e=!1,t=!1){return this._betweenSquaresCount+(e?1:0)+(t?1:0)}_getBetweenSquaresData(){let e={x:0,y:0};for(let t of["x","y"])this._startSquare.coordinates[t]>this._endSquare.coordinates[t]?e[t]=-1:this._startSquare.coordinates[t]<this._endSquare.coordinates[t]&&(e[t]=1);let t=Math.max(this._dx,this._dy);for(let s=1;s<t;s++){let t=[];for(let i of["x","y"])t.push(this._startSquare.coordinates[i]+s*e[i]);this._betweenSquaresNames.push(u.coordinatesToName(...t))}this._betweenSquaresCount=this._betweenSquaresNames.length}}class l{static UP_LEFT="upLeft";static UP="up";static UP_RIGHT="upRight";static RIGHT="right";static DOWN_RIGHT="downRight";static DOWN="down";static DOWN_LEFT="downLeft";static LEFT="left";static VALIDATE={[l.UP_LEFT]:e=>!e.onEdge.up&&!e.onEdge.left,[l.UP]:e=>!e.onEdge.up,[l.UP_RIGHT]:e=>!e.onEdge.up&&!e.onEdge.right,[l.RIGHT]:e=>!e.onEdge.right,[l.DOWN_RIGHT]:e=>!e.onEdge.down&&!e.onEdge.right,[l.DOWN]:e=>!e.onEdge.down,[l.DOWN_LEFT]:e=>!e.onEdge.down&&!e.onEdge.left,[l.LEFT]:e=>!e.onEdge.left};static DELTA={[l.UP_LEFT]:{x:-1,y:1},[l.UP]:{x:0,y:1},[l.UP_RIGHT]:{x:1,y:1},[l.RIGHT]:{x:1,y:0},[l.DOWN_RIGHT]:{x:1,y:-1},[l.DOWN]:{x:0,y:-1},[l.DOWN_LEFT]:{x:-1,y:-1},[l.LEFT]:{x:-1,y:0}};constructor(e){this._square=e}get upLeft(){return this._getSquare(l.UP_LEFT)}get up(){return this._getSquare(l.UP)}get upRight(){return this._getSquare(l.UP_RIGHT)}get right(){return this._getSquare(l.RIGHT)}get downRight(){return this._getSquare(l.DOWN_RIGHT)}get down(){return this._getSquare(l.DOWN)}get downLeft(){return this._getSquare(l.DOWN_LEFT)}get left(){return this._getSquare(l.LEFT)}_getSquare(e){if(!this._square.board||!l.VALIDATE[e](this._square))return null;let t=this._square.coordinates.x+l.DELTA[e].x,s=this._square.coordinates.y+l.DELTA[e].y,i=u.coordinatesToName(t,s);return this._square.board.squares[i]}}class u{static symbolToNumber={a:0,b:1,c:2,d:3,e:4,f:5,g:6,h:7};static numberToSymbol={0:"a",1:"b",2:"c",3:"d",4:"e",5:"f",6:"g",7:"h"};static coordinatesToName(e,t){if(!a.correctCoordinates(e,t))throw Error(`Incorrect square coordinates (x - ${e}, y - ${t}).`);return`${e=u.numberToSymbol[e]}${++t}`}constructor(e,t=null){if("string"==typeof e){this._name=new o(e);let t=u.symbolToNumber[this._name.symbol],s=parseInt(this._name.number)-1;this._coordinates=new a([t,s])}else{if(!Array.isArray(e))throw Error("Wrong identifier passed. It need to be SquareName or SquareCoordinates create param.");{this._coordinates=new a(e);let t=u.numberToSymbol[this._coordinates.x],s=this._coordinates.y+1;this._name=new o(`${t}${s}`)}}this._board=t,this._piece=null,this.pieces=new i(this),this.onEdge=new n(this.coordinates),this.neighbors=new l(this),this._isLight=this._getIsLight()}get name(){return this._name}get coordinates(){return this._coordinates}get board(){return this._board}get piece(){return this._piece}get isLight(){return this._isLight}_getIsLight(){let e=this.coordinates.x%2==0,t=this.coordinates.y%2==0;return e&&!t||!e&&t}placePiece(e,t=!0){if(this.board&&!e.canBeReplacedTo(this)){if(this.board.positionIsSetted&&(!this.board.transformation.on||this.name.value!=this.board.transformation.toSquareName))throw Error("Board position is already setted.");e.isKing&&this.board.placeKing(e)}this._piece=e,t&&this.board&&this.board.refreshAllSquares()}removePiece(e=!0){this._piece=null,e&&this.board&&this.board.refreshAllSquares()}theSame(e){return this.name.value===e.name.value}onVertical(e){return this.name.symbol===e}onRank(e){return this.name.number==e}getBetweenSquaresNames(e,t=!1,s=!1){return new h(this,e).betweenSquaresNames(t,s)}getBetweenSquaresCount(e,t=!1,s=!1){return new h(this,e).betweenSquaresCount(t,s)}}class c{static WHITE="white";static BLACK="black";static ALL_COLORS=[c.WHITE,c.BLACK];static PAWN="pawn";static KNIGHT="knight";static BISHOP="bishop";static ROOK="rook";static QUEEN="queen";static KING="king";static ALL_KINDS=[c.PAWN,c.KNIGHT,c.BISHOP,c.ROOK,c.QUEEN,c.KING];static ALL_LINEARS=[c.BISHOP,c.ROOK,c.QUEEN];static ALL_PAWN_TRANSFORM=[c.KNIGHT,c.BISHOP,c.ROOK,c.QUEEN];constructor(e,t,s=null,i=!0){this.color=e,this.kind=s,this._isLinear=c.ALL_LINEARS.includes(s),this.squares=new r(this),this._refreshSquareFinder(),this.setInitState(),this.getPlace(t,i)}get color(){return this._color}set color(e){if(!c.ALL_COLORS.includes(e))throw Error(`'${e}' is wrong piece color value. Use any of Piece.ALL_COLORS.`);this._color=e}get stuck(){return!this.squares[s.MOVE]&&!this.squares[s.ATTACK]}get kind(){return this._kind}set kind(e){if(null!=e&&!c.ALL_KINDS.includes(e))throw Error(`'${e}' is wrong piece kind value. Use any of Piece.ALL_KINDS.`);this._kind=e}get isLinear(){return this._isLinear}get board(){return this.square.board}get isPawn(){return this.kind==c.PAWN}get isKnight(){return this.kind==c.KNIGHT}get isBishop(){return this.kind==c.BISHOP}get isRook(){return this.kind==c.ROOK}get isQueen(){return this.kind==c.QUEEN}get isKing(){return this.kind==c.KING}_refreshSquareFinder(){this.sqrBeforeXray=null,this.xrayControl=!1,this.endOfALine=!1}_refreshSquares(){this.squares.refresh(),this._refreshSquareFinder()}_nextSquareAction(e){if(this.sqrBeforeXray){if(this.squares.add(s.XRAY,e),this.xrayControl&&(this.squares.add(s.CONTROL,e),this.xrayControl=!1),e.piece){let t=e.piece.isKing&&!this.sameColor(e.piece),s=!this.sameColor(this.sqrBeforeXray.piece);t&&s&&(this.sqrBeforeXray.piece.binder=this),this.endOfALine=!0}}else e.piece?(this.sameColor(e.piece)?this.squares.add(s.COVER,e):(this.squares.add(s.ATTACK,e),e.piece.isKing&&(e.piece.checkers.add(this.square.piece),this.xrayControl=!0)),this.squares.add(s.CONTROL,e),this.isLinear&&(this.sqrBeforeXray=e)):(this.squares.add(s.MOVE,e),this.squares.add(s.CONTROL,e))}getSquares(){}setInitState(){this.binder=null}getPlace(e,t=!0){this.square=e,e.placePiece(this,t)}theSame(e){return this.square.theSame(e.square)}sameColor(e){return this.color===e.color}hasColor(e){return this.color===e}canBeReplacedTo(e){return!e.piece&&this.squares.includes(s.MOVE,e)||!!e.piece&&!e.piece.isKing&&!this.sameColor(e.piece)&&this.squares.includes(s.ATTACK,e)}getTotalImmobilize(){for(let e of[s.MOVE,s.ATTACK,s.COVER])this.squares.refresh(e)}getBind(e){this.squares.refresh(s.XRAY);let t=this.binder.square.getBetweenSquaresNames(e,!0,!0);for(let e of[s.MOVE,s.ATTACK,s.COVER])this.squares.limit(e,t)}getCheck(e,t){this.squares.refresh(s.COVER),this.squares.refresh(s.XRAY),this.squares.limit(s.ATTACK,[e.square.name.value]),this.squares.limit(s.MOVE,t)}}class _ extends c{constructor(e,t,s,i=!0){super(e,t,s,i)}_getLinearSquares(e){for(let t of e){this._refreshSquareFinder();let e=this.square.coordinates.x+t.x,s=this.square.coordinates.y+t.y;for(;a.correctCoordinates(e,s)&&(this._nextSquareAction(this.board.squares.getFromCoordinates(e,s)),!this.endOfALine);)e+=t.x,s+=t.y}}}class d extends c{constructor(e,t,s,i=!0){super(e,t,s,i)}_getStepSquares(e){this._refreshSquareFinder();for(let t of e){let e=this.square.coordinates.x+t.x,s=this.square.coordinates.y+t.y;a.correctCoordinates(e,s)&&this._nextSquareAction(this.board.squares.getFromCoordinates(e,s))}}}class g extends c{static DIRECTIONS={[c.WHITE]:1,[c.BLACK]:-1};static INITIAL_RANKS={[c.WHITE]:"2",[c.BLACK]:"7"};constructor(e,t,s=!0){if(t.onEdge.up||t.onEdge.down)throw Error(`Pawn couldn't be placed on ${t.name.value} square.`);super(e,t,c.PAWN,s)}get direction(){return g.DIRECTIONS[this.color]}get onInitialRank(){return this.square.onRank(g.INITIAL_RANKS[this.color])}getSquares(){this._refreshSquares(),this._getMoveSquares(),this._getAttackSquares()}_getMoveSquares(){for(let[e,t]of this._getMoveCoordinates()){let i=this.board.squares.getFromCoordinates(e,t);if(i.piece)break;this.squares.add(s.MOVE,i)}}_getMoveCoordinates(){let e=[];return e.push([this.square.coordinates.x,this.square.coordinates.y+1*this.direction]),this.onInitialRank&&e.push([this.square.coordinates.x,this.square.coordinates.y+2*this.direction]),e}_getAttackSquares(){for(let[e,t]of this._getAttackCoordinates()){let i=this.board.squares.getFromCoordinates(e,t);this.squares.add(s.CONTROL,i),i.piece?this.sameColor(i.piece)?this.squares.add(s.COVER,i):(this.squares.add(s.ATTACK,i),i.piece.isKing&&i.piece.checkers.add(this.square.piece)):this._checkEnPassantSquare(i)&&(this.squares.add(s.ATTACK,i),this.squares.add(s.MOVE,i))}}_getAttackCoordinates(){let e=[];return this.square.onEdge.right||e.push([this.square.coordinates.x+1,this.square.coordinates.y+1*this.direction]),this.square.onEdge.left||e.push([this.square.coordinates.x-1,this.square.coordinates.y+1*this.direction]),e}_checkEnPassantSquare(e){return this.board.enPassantSquare&&e.theSame(this.board.enPassantSquare)&&!this.hasColor(this.board.colors.current)}}class f extends d{static stepPoints=[{x:-2,y:1},{x:-1,y:2},{x:1,y:2},{x:2,y:1},{x:2,y:-1},{x:1,y:-2},{x:-1,y:-2},{x:-2,y:-1}];constructor(e,t,s=!0){super(e,t,c.KNIGHT,s)}getSquares(){this._refreshSquares(),this._getStepSquares(f.stepPoints)}getBind(){this.getTotalImmobilize()}}class S extends _{static directions=[{x:-1,y:1},{x:1,y:1},{x:1,y:-1},{x:-1,y:-1}];constructor(e,t,s=!0){super(e,t,c.BISHOP,s)}getSquares(){this._refreshSquares(),this._getLinearSquares(S.directions)}}class p extends _{static directions=[{x:0,y:1},{x:1,y:0},{x:0,y:-1},{x:-1,y:0}];constructor(e,t,s=!0){super(e,t,c.ROOK,s)}get castleRoad(){return this.hasOwnProperty("_castleRoad")?this._castleRoad:null}getSquares(){this._refreshSquares(),this._getLinearSquares(p.directions)}setCastleRoad(e){this._castleRoad=e}removeCastleRoad(){this._castleRoad=null}}class q extends _{constructor(e,t,s=!0){super(e,t,c.QUEEN,s)}getSquares(){this._refreshSquares(),this._getLinearSquares(S.directions),this._getLinearSquares(p.directions)}}class C{static SHORT="short";static LONG="long";static ALL_SIDES=[C.SHORT,C.LONG];static toSquaresSigns={[C.SHORT]:"g",[C.LONG]:"c"};static rookToSquaresSigns={[C.SHORT]:"f",[C.LONG]:"d"};static rookSquaresSigns={[C.SHORT]:"h",[C.LONG]:"a"};static freeSigns={[C.SHORT]:["f","g"],[C.LONG]:["b","c","d"]};static safeSigns={[C.SHORT]:["f","g"],[C.LONG]:["c","d"]};constructor(e,t,s){this._castle=e,this._rank=t,this._side=s;let i=`${C.toSquaresSigns[s]}${this._rank}`;this._toSquare=e.king.board.squares[i];let r=`${C.rookToSquaresSigns[s]}${this._rank}`;this._rookToSquare=e.king.board.squares[r];let o=`${C.rookSquaresSigns[s]}${this._rank}`;this._rook=e.king.board.squares[o].piece,this._checkRook(),this._rook.setCastleRoad(this),this._needToBeFreeSquares=[],this._needToBeSafeSquares=[],this._fill()}get toSquare(){return this._toSquare}get rookToSquare(){return this._rookToSquare}get rook(){return this._rook}get side(){return this._side}get isFree(){return 0==this._needToBeFreeSquares.filter((e=>e.piece)).length}get isSafe(){for(let e of this._needToBeSafeSquares)if(e.pieces[s.CONTROL]&&e.pieces[s.CONTROL].filter((e=>!e.hasColor(this._castle.king.color))).length>0)return!1;return!0}get isLegal(){return this.isFree&&this.isSafe}_checkRook(){if(!this._rook||!this._rook.isRook||!this._castle.king.sameColor(this._rook))throw Error(`Fail to assign rook to ${this._castle.king.color} king ${this._side} castle road.`)}_fill(){let e=[[this._needToBeFreeSquares,C.freeSigns[this._side]],[this._needToBeSafeSquares,C.safeSigns[this._side]]];for(let[t,s]of e)for(let e of s)t.push(this._castle.king.board.squares[`${e}${this._rank}`])}}class L{constructor(e=null){e=(e||[]).slice(0,2),this._checkAcceptedSides(e);for(let t of C.ALL_SIDES)this[t]=e.includes(t)}_checkAcceptedSides(e){for(let t of e)if(!C.ALL_SIDES.includes(t))throw Error(`${t} is not a correct castle side name. Use one of ${C.ALL_SIDES}.`)}}class m{static RANKS={[c.WHITE]:"1",[c.BLACK]:"8"};constructor(e,t=null){let s;if(this._king=e,e.onInitialSquare&&t){if(!t instanceof L)throw Error("Castle initial data has to be an instance of KingCastleInitial.");s=t}else s=new L;for(let t of C.ALL_SIDES)s[t]?this[t]=new C(this,m.RANKS[e.color],t):this[t]=null}get king(){return this._king}stop(e="all"){let t="all"==e?C.ALL_SIDES:[e];for(let e of t)this[e]&&(this[e].rook.removeCastleRoad(),this[e]=null)}getRoad(e){for(let t of C.ALL_SIDES)if(this[t]&&this[t].toSquare.theSame(e))return this[t];return null}}class I extends Array{constructor(e){super(),this._king=e}get first(){return this.length>0?this[0]:null}get second(){return 2==this.length?this[1]:null}get exist(){return this.length>0}get single(){return 1==this.length}get several(){return 2==this.length}get isLegal(){return!this.exist||this._isPiecesLegal()&&(this.single||this.several&&this._isSeveralLegal())}_isPiecesLegal(){return 0==this.filter((e=>e.isKing)).length&&0==this.filter((e=>!e.squares.includes(s.CONTROL,this._king.square))).length}_isDiscoverLegal(e,t){if(!t.isLinear)return!1;let i=t.square.getBetweenSquaresNames(this._king.square);for(let t of i){let i=this._king.board.squares[t];if(!i.piece&&e.squares.includes(s.CONTROL,i))return!0}return!1}_isSeveralLegal(){return this._isDiscoverLegal(this.first,this.second)||this._isDiscoverLegal(this.second,this.first)}add(e){this.push(e)}}class E extends d{static stepPoints=[{x:-1,y:1},{x:0,y:1},{x:1,y:1},{x:1,y:0},{x:1,y:-1},{x:0,y:-1},{x:-1,y:-1},{x:-1,y:0}];static INITIAL_SQUARE_NAMES={[c.WHITE]:"e1",[c.BLACK]:"e8"};constructor(e,t,s=!0){super(e,t,c.KING,s)}get onInitialSquare(){return this.square.name.value==E.INITIAL_SQUARE_NAMES[this.color]}_removeEnemyControlledSquares(){for(let e of[s.MOVE,s.ATTACK]){if(!this.squares[e])continue;let t=[];for(let i of this.squares[e])i.pieces[s.CONTROL].filter((e=>!this.sameColor(e))).length>0&&t.push(i);for(let s of t)this.squares.remove(e,s)}}_addCastleMoves(){for(let e of C.ALL_SIDES)this.castle[e]&&this.castle[e].isLegal&&this.squares.add(s.MOVE,this.castle[e].toSquare)}_removeCastleMoves(){for(let e of C.ALL_SIDES)this.castle[e]&&this.squares.remove(s.MOVE,this.castle[e].toSquare)}setInitState(){this.checkers=new I(this)}getSquares(){this._refreshSquares(),this._getStepSquares(E.stepPoints),this._removeEnemyControlledSquares(),this._addCastleMoves()}getCheck(){this._removeCastleMoves()}setCastle(e){this.castle=new m(this,e)}}class R{constructor(){this.refreshSquareNames()}get fromSquareName(){return this._fromSquareName}get toSquareName(){return this._toSquareName}get on(){return null!==this.fromSquareName&&null!==this.toSquareName}setSquaresNames(e,t){this._fromSquareName=e,this._toSquareName=t}refreshSquareNames(){this._fromSquareName=null,this._toSquareName=null}}class T{constructor(){for(let e of c.ALL_COLORS)this[e]=null}*[Symbol.iterator](){for(let e of c.ALL_COLORS)this[e]&&(yield this[e])}setItem(e){if(!(e instanceof E))throw Error("King instance expected.");if(this[e.color])throw Error(`${e.color} king is already exists.`);this[e.color]=e}}class A{static PRIORITIES={[c.WHITE]:[0,1],[c.BLACK]:[1,0]};static ALL=[c.WHITE,c.BLACK];constructor(){this._priority=null}get firstPriority(){return this._checkWasSetted(),this._priority[0]}get secondPriority(){return this._checkWasSetted(),this._priority[1]}get current(){return A.ALL[this.firstPriority]}get opponent(){return A.ALL[this.secondPriority]}_checkWasSetted(){if(!this._priority)throw Error("Board color wasn't setted.")}setCurrent(e){if(!c.ALL_COLORS.includes(e))throw Error(`'${e}' is wrong color value. Use any of ${c.ALL_COLORS}.`);this._priority=A.PRIORITIES[e]}changePriority(){this._priority=[this.secondPriority,this.firstPriority]}}class k{constructor(e){this._value=null}get value(){return this._value}set value(e){if("number"!=typeof e)throw Error("Count need to be an number.");if(e<0)throw Error("Count need to be positive number.");this._value=e}update(){this._checkValueWasSetted(),this._value++}_checkValueWasSetted(){if(null===this._value)throw Error("Value need to be setted.")}}class O extends k{constructor(){super(),this._turnedOn=!1,this._needToRefresh=!1}switch(){this._checkValueWasSetted(),this._turnedOn=!0,this._needToRefresh=!0}update(){this._checkValueWasSetted(),this._turnedOn&&(this._needToRefresh?(this._value=0,this._needToRefresh=!1):this._value++)}}class P{constructor(e){[this.positionData,this.currentColorData,this.castleRightsData,this.enPassantData,this.fiftyMovesRuleData,this.movesCounterData]=e.split(" ")}}class N{static PIECES={[c.WHITE]:{[c.PAWN]:"P",[c.KNIGHT]:"N",[c.BISHOP]:"B",[c.ROOK]:"R",[c.QUEEN]:"Q",[c.KING]:"K"},[c.BLACK]:{[c.PAWN]:"p",[c.KNIGHT]:"n",[c.BISHOP]:"b",[c.ROOK]:"r",[c.QUEEN]:"q",[c.KING]:"k"}};static COLORS={[c.WHITE]:"w",[c.BLACK]:"b"};static CASTLE_RIGHTS={[c.WHITE]:{[C.SHORT]:"K",[C.LONG]:"Q"},[c.BLACK]:{[C.SHORT]:"k",[C.LONG]:"q"}};constructor(e){this._board=e,this.value=[this._getPositionData(),N.COLORS[e.colors.current],this._getCastleRightsData(),e.enPassantSquare?e.enPassantSquare.name.value:"-",e.fiftyMovesRuleCounter.value.toString(),e.movesCounter.value.toString()].join(" ")}_getPositionData(){let e=[];for(let t of o.numbers){let s=[];for(let e of o.symbols){let i=this._board.squares[`${e}${t}`];i.piece?s.push(N.PIECES[i.piece.color][i.piece.kind]):s.push("0")}e.push(s.join("").replace(/0+/g,(e=>e.length)))}return e.reverse().join("/")}_getCastleRightsData(){let e=[];for(let t of this._board.kings)for(let s of C.ALL_SIDES)t.castle[s]&&e.push(N.CASTLE_RIGHTS[t.color][s]);return e.join("")||"-"}}class y{static PIECES={P:[c.WHITE,c.PAWN],N:[c.WHITE,c.KNIGHT],B:[c.WHITE,c.BISHOP],R:[c.WHITE,c.ROOK],Q:[c.WHITE,c.QUEEN],K:[c.WHITE,c.KING],p:[c.BLACK,c.PAWN],n:[c.BLACK,c.KNIGHT],b:[c.BLACK,c.BISHOP],r:[c.BLACK,c.ROOK],q:[c.BLACK,c.QUEEN],k:[c.BLACK,c.KING]};constructor(e){for(let e of c.ALL_COLORS)this[e]=[];this._rows=this._getRows(e),this._fillData()}_getRows(e){return e.replace(/\d/g,(e=>"0".repeat(parseInt(e)))).split("/").reverse()}_fillData(){for(let e=0;e<8;e++)for(let t=0;t<8;t++){if("0"==this._rows[e][t])continue;let[s,i]=y.PIECES[this._rows[e][t]],r=u.coordinatesToName(t,e);this[s].push([i,r])}}}class b{static WHITE_SHORT="K";static WHITE_LONG="Q";static BLACK_SHORT="k";static BLACK_LONG="q";static ALL_SIGNS=[b.WHITE_SHORT,b.WHITE_LONG,b.BLACK_SHORT,b.BLACK_LONG];static VALUES={[b.WHITE_SHORT]:[c.WHITE,C.SHORT],[b.WHITE_LONG]:[c.WHITE,C.LONG],[b.BLACK_SHORT]:[c.BLACK,C.SHORT],[b.BLACK_LONG]:[c.BLACK,C.LONG]};constructor(e="-"){this._signs=e.slice(0,4),this._fillData()}_checkSign(e){if(!b.ALL_SIGNS.includes(e))throw Error(`"${e}" is not a correct castle rights sign. Use one of ${b.ALL_SIGNS}.`)}_getRoadKinds(){let e={};for(let t of c.ALL_COLORS)e[t]=[];for(let t of this._signs){if("-"==t)continue;this._checkSign(t);let[s,i]=b.VALUES[t];e[s].push(i)}return e}_fillData(){let e=this._getRoadKinds();for(let t of c.ALL_COLORS)this[t]=new L(e[t])}}class v{static COLORS={w:c.WHITE,b:c.BLACK};constructor(e){this.position=new y(e.positionData),this.currentColor=v.COLORS[e.currentColorData],this.castleRights=new b(e.castleRightsData),this.enPassantSquareName="-"==e.enPassantData?null:e.enPassantData,this.fiftyMovesRuleCounter=parseInt(e.fiftyMovesRuleData),this.movesCounter=parseInt(e.movesCounterData)}}class w{constructor(e){this._board=e}positionIsIllegal(){return this.fail("Board position is illegal.")}positionAlreadySetted(){return this.fail("Board position has been already setted.")}positionNotSetted(){return this.fail("Board position isn't setted.")}resultAlreadyReached(){return this.fail("Result is already reached.")}fail(e){return this.success({description:e,success:!1})}success(e){return{...this._board.state,description:"",success:!0,...e||{}}}}class K{static VALUES_CHOICES=[0,.5,1];constructor(e){this._board=e,this._value=null}get value(){return this._value}trySetValue(e){if(!this._board.positionIsSetted||!this._board.positionIsLegal)return;let t=e?this._board._colors.opponent:this._board._colors.current,s=this._board.kings[t],i=this._checkPiecesHaveNoMoves(t);if(i&&s.checkers.exist){let t;t=e?[this._board.colors.secondPriority,this._board.colors.firstPriority]:[this._board.colors.firstPriority,this._board.colors.secondPriority],this._setValue(...t)}else(i||this._board.insufficientMaterial)&&this._setValue(.5,.5)}_checkPiecesHaveNoMoves(e){return 0==this._board.allPieces.filter((t=>t.hasColor(e)&&!t.stuck)).length}_setValue(e,t){if(!K.VALUES_CHOICES.includes(e)||!K.VALUES_CHOICES.includes(t))throw Error(`Wrong points value. Try one of ${K.VALUES_CHOICES}.`);this._value=[e,t]}}class x{constructor(e){this._items=[];for(let t of o.symbols)for(let s of o.numbers){let i=`${t}${s}`,r=new u(i,e);this[i]=r,this._items.push(r)}}get occupied(){return Object.fromEntries(Object.entries(this).filter((e=>e[1].piece)))}getFromCoordinates(e,t){return this[u.coordinatesToName(e,t)]}removePieces(e){for(let t of this._items)t.removePiece(e)}}class B{constructor(e){this._square=e,this.isLegal=!e||!e.piece&&(e.onRank(3)&&this._checkThirdRank()||e.onRank(6)&&this._checkSixthRank())}_checkThirdRank(){return!this._square.neighbors.down.piece&&this._square.neighbors.up.piece&&this._square.neighbors.up.piece.isPawn&&this._square.neighbors.up.piece.hasColor(c.WHITE)}_checkSixthRank(){return!this._square.neighbors.up.piece&&this._square.neighbors.down.piece&&this._square.neighbors.down.piece.isPawn&&this._square.neighbors.down.piece.hasColor(c.BLACK)}}class H{constructor(e,t){this._pieces=e,this._color=t,this.isLegal=this._checkKingsCount()&&this._checkQueensCount()&&this._checkRooksCount()&&this._checkBishopsCount()&&this._checkKnightsCount()&&this._checkPawnsCount()}_checkKingsCount(){return 1==this._pieces.filter((e=>e.isKing&&e.hasColor(this._color))).length}_checkQueensCount(){return this._pieces.filter((e=>e.isQueen&&e.hasColor(this._color))).length<=9}_checkRooksCount(){return this._pieces.filter((e=>e.isRook&&e.hasColor(this._color))).length<=10}_checkBishopsCount(){return this._pieces.filter((e=>e.isBishop&&e.hasColor(this._color))).length<=10}_checkKnightsCount(){return this._pieces.filter((e=>e.isKnight&&e.hasColor(this._color))).length<=10}_checkPawnsCount(){return this._pieces.filter((e=>e.isPawn&&e.hasColor(this._color))).length<=8}}class W{constructor(e){this.isLegal=0==e.filter((e=>e.isPawn&&(e.square.onEdge.up||e.square.onEdge.down))).length}}class D{constructor(e){this.isLegal=!e.squares[s.ATTACK]||0==e.squares[s.ATTACK].filter((e=>e.piece.isKing)).length}}class M{constructor(e){this._pieces=e,this.isLegal=this._checkPawnsAndRooksAndQueensCount()&&this._checkBishopsAndKnightsCount()}_checkPawnsAndRooksAndQueensCount(){return 0==this._pieces.filter((e=>e.isPawn||e.isRook||e.isQueen)).length}_checkBishopsAndKnightsCount(){let e=this._pieces.filter((e=>e.isBishop||e.isKnight));return e.length<2||0==e.filter((e=>e.isKnight))&&(0==e.filter((e=>e.square.isLight)).length||0==e.filter((e=>!e.square.isLight)).length)}}class G{static EMPTY_FEN="8/8/8/8/8/8/8/8 w - - 0 1";static INITIAL_FEN="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";static PIECES_BOX={[c.PAWN]:g,[c.KNIGHT]:f,[c.BISHOP]:S,[c.ROOK]:p,[c.QUEEN]:q,[c.KING]:E};constructor(e){e=e||G.EMPTY_FEN,this._response=new w(this),this._squares=new x(this),this._result=new K(this),this._transformation=new R,this._kings=new T,this._positionIsLegal=!1,this._positionIsSetted=!1,this._colors=new A,this._initialCastleRights=null,this._enPassantSquare=null,this._fiftyMovesRuleCounter=new O,this._movesCounter=new k,this._latestFEN=e,this._init(e)}get squares(){return this._squares}get positionIsSetted(){return this._positionIsSetted}get positionIsLegal(){return this._positionIsLegal}get transformation(){return this._transformation}get colors(){return this._colors}get kings(){return this._kings}get enPassantSquare(){return this._enPassantSquare}get fiftyMovesRuleCounter(){return this._fiftyMovesRuleCounter}get movesCounter(){return this._movesCounter}get FEN(){return new N(this).value}get allPieces(){return Object.values(this._squares.occupied).map((e=>e.piece))}get insufficientMaterial(){let e=new M(this.allPieces);return this._positionIsLegal&&e.isLegal}get state(){return{positionIsLegal:this._positionIsLegal,FEN:this.FEN,insufficientMaterial:this.insufficientMaterial,transformation:this._transformation.on,result:this._result.value}}setCurrentColor(e){if(this._positionIsSetted)return this._response.positionAlreadySetted();try{this._setCurrentColor(e)}catch(e){return this._response.fail(e.message)}return this._response.success()}setCastleRights(e){return this._positionIsSetted?this._response.positionAlreadySetted():e instanceof b?(this._setCastleRights(e),this._response.success()):this._response.fail("Setted data has to be an instance of BoardInitialCastle.")}setEnPassantSquare(e){if(this._positionIsSetted)return this._response.positionAlreadySetted();if(e){let t=Object.keys(this.squares);if(!t.includes(e))return this._response.fail(`"${e}" is wrong square name. Try one of ${t}.`)}return this._setEnPassantSquare(e),this._response.success()}setFiftyMovesRuleCounter(e){return this.setCounterValue(this._fiftyMovesRuleCounter,e)}setMovesCounter(e){return this.setCounterValue(this._movesCounter,e)}setCounterValue(e,t){if(this._positionIsSetted)return this._response.positionAlreadySetted();try{e.value=t}catch(e){return this._response.fail(e.message)}return this._response.success()}setPosition(e){return this._positionIsSetted?this._response.positionAlreadySetted():e instanceof y?(this._setPosition(e),this.markPositionAsSetted()):this._response.fail("Position data has to be an instance of BoardInitialPosition.")}markPositionAsSetted(){return this._markPositionAsSetted(),this._positionIsLegal?this._response.success():this._response.positionIsIllegal()}pawnTransformation(e){return c.ALL_PAWN_TRANSFORM.includes(e)?this._positionIsSetted?this._result.value?this._response.resultAlreadyReached():(this._checkPositionIsLegal(),this._positionIsLegal?this._transformation.on?(this._placePiece(this._colors.current,e,this._transformation.toSquareName),this._removePiece(this._transformation.fromSquareName),this._refreshState(),this._fiftyMovesRuleCounter.switch(),this._moveEnd()):this._response.fail("There isn't transformation."):this._response.positionIsIllegal()):this._response.positionNotSetted():this._response.fail("Wrong piece kind.")}placeKing(e){return this._kings.setItem(e),this._initialCastleRights&&this._initialCastleRights[e.color]&&e.setCastle(this._initialCastleRights[e.color]),this._response.success()}placePiece(e,t,s){return this._positionIsSetted?this._response.positionAlreadySetted():(this._placePiece(e,t,s),this._response.success())}removePiece(e){return this._positionIsSetted?this._response.positionAlreadySetted():(this._removePiece(e),this._response.success())}movePiece(e,t,i=!0){if(!this._positionIsSetted)return this._response.positionNotSetted();if(this._result.value)return this._response.resultAlreadyReached();if(this._checkPositionIsLegal(),!this._positionIsLegal)return this._response.positionIsIllegal();let r=this._squares[e],o=this._squares[t],a=r.piece;if(!a)return this._response.fail("There isn't a piece to replace.");if(!a.hasColor(this._colors.current))return this._response.fail("Wrong color piece.");if(!a.canBeReplacedTo(o))return this._response.fail("Illegal move.");if(this._refreshState(),a.isKing){let e=a.castle.getRoad(o);e&&this._rookCastleMove(e),a.castle.stop()}else if(a.isRook)a.castleRoad&&this._kings[a.color].castle.stop(a.castleRoad.side);else if(a.isPawn){if(o.onEdge.up||o.onEdge.down)return this._transformation.setSquaresNames(e,t),this._response.success(`Pawn is ready to transform on ${t} square.`);this._handleEnPassant(r,o,a)}return this._replacePiece(r,o,a,!1),(a.isPawn||a.squares.includes(s.ATTACK,o))&&this._fiftyMovesRuleCounter.switch(),i?this._moveEnd():void 0}_checkPositionIsLegal(e=!1){this._positionIsLegal=!0;let t=this.allPieces;for(let s of c.ALL_COLORS){let i=this._kings[s];if(this._positionIsLegal=new H(t,s).isLegal&&new D(i).isLegal&&this._checkCheckersIsLegal(i,e),!this._positionIsLegal)return}this._positionIsLegal=new W(t).isLegal&&new B(this._enPassantSquare).isLegal}refreshAllSquares(e=!1){let t=e?this._colors.opponent:this._colors.current;for(let e of this.allPieces)e.setInitState();for(let e of this.allPieces.filter((e=>!e.isKing)))e.getSquares();for(let e of this.allPieces.filter((e=>e.binder)))e.getBind(this._kings[e.color].square);for(let e of this.allPieces.filter((e=>e.isKing)))e.getSquares();return this._checkPositionIsLegal(e),this._handleKingChecks(this._kings[t]),this._result.trySetValue(e),this._response.success()}_handleKingChecks(e){if(e&&e.checkers.exist&&e.checkers.isLegal)if(e.checkers.single){let t=e.checkers.first,s=[];t.isLinear&&(s=t.square.getBetweenSquaresNames(e.square));let i=this.allPieces.filter((t=>t.sameColor(e)));for(let e of i)e.getCheck(t,s)}else{let t=this.allPieces.filter((t=>t.sameColor(e)&&!t.isKing));for(let e of t)e.getTotalImmobilize()}}_checkCheckersIsLegal(e,t){return e.checkers.isLegal&&(!e.checkers.exist||e.hasColor(t?this._colors.opponent:this._colors.current))}_refreshState(){this._transformation.refreshSquareNames(),this._enPassantSquare=null}_handleEnPassant(e,t,i){if(1==t.getBetweenSquaresCount(e))this._enPassantSquare=this._squares.getFromCoordinates(t.coordinates.x,t.coordinates.y-i.direction);else if(i.squares.includes(s.ATTACK,t)&&!t.piece){let s=t.coordinates.x,i=e.coordinates.y;this._removePiece(this._squares.getFromCoordinates(s,i).name.value)}}_placePiece(e,t,s){new G.PIECES_BOX[t](e,this._squares[s],!1)}_removePiece(e){this._squares[e].removePiece(!1)}_replacePiece(e,t,s,i=!0){e.removePiece(!1),s.getPlace(t,i)}_rookCastleMove(e){let t=e.rook.square.name.value,s=e.rookToSquare.name.value;this.movePiece(t,s,!1)}_moveEnd(){return this.refreshAllSquares(!0),this._positionIsLegal?(this._colors.changePriority(),this._updateCounters(),this._latestFEN=this.FEN,this._response.success()):(this._rollBack(),this._response.fail("Illegal position has been prevented."))}_rollBack(){this._positionIsSetted=!1,this._kings=new T,this._init(this._latestFEN)}_updateCounters(){this._fiftyMovesRuleCounter.update(),this._colors.current==c.WHITE&&this._movesCounter.update()}_init(e){let t=new v(new P(e));this._setCurrentColor(t.currentColor),this._setCastleRights(t.castleRights),this._setEnPassantSquare(t.enPassantSquareName),this._setFiftyMovesRuleCounter(t.fiftyMovesRuleCounter),this._setMovesCounter(t.movesCounter),this._setPosition(t.position),this._markPositionAsSetted()}_setCurrentColor(e){this._colors.setCurrent(e)}_setCastleRights(e){this._initialCastleRights=e;for(let t of this._kings)t.setCastle(e[t.color])}_setEnPassantSquare(e){this._enPassantSquare=e?this.squares[e]:null}_setFiftyMovesRuleCounter(e){this._setCounterValue(this._fiftyMovesRuleCounter,e)}_setMovesCounter(e){this._setCounterValue(this._movesCounter,e)}_setCounterValue(e,t){e.value=t}_setPosition(e){this.squares.removePieces(!1);for(let t of c.ALL_COLORS){let s=e[t];for(let[e,i]of s.filter((e=>e[0]!=c.KING)))this._placePiece(t,e,i);for(let[e,i]of s.filter((e=>e[0]==c.KING)))this._placePiece(t,e,i)}}_markPositionAsSetted(){this.refreshAllSquares(),this._positionIsSetted=this._positionIsLegal,this._result.trySetValue(!1)}}window.chessstuff=t})();